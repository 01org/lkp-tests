
Linux Kernel Performance tests HOWTO
------------------------------------


Abstract

This document explains the steps of setup and running the test
suite for daily kernel development.


1. Preface

This document is written to help developers run tests and get
the results on local develop machine and bring the community up
to speed on the ins and outs of the Linux Kernel Performance tests
project.


1.1 Copyright

Refer to COPYING.


1.2 Disclaimer

Use the information in this document at your own risk. We
disavow any potential liability for the contents of this
document. Use of the concepts, examples, and/or other content
of this document is entirely at your own risk.

All copyrights are owned by their owners, unless specifically
noted otherwise. Use of a term in this document should
not be regarded as affecting the validity of any trademark
or service mark.

Naming of particular products or brands should not be seen
as endorsements.

You are strongly recommended to take a backup of your system
before major installation and backups at regular intervals.


2. Introduction


3. Structure


4. Writing Tests


5. Testing

Better to use a Debian system to run the tests in order to get more
accurate results and reduce strange errors since it was developed
based on a Debian system.


5.1 Split job file

Use split-job command to split the predefined job file.

	# ./sbin/split-job -h
	Usage: split-job [options] jobs...

	options:
	    -o, --output PATH                output path
	    -c, --config CONFIG              test kernel config
	    -k, --kernel COMMIT              test kernel commit
	    -h, --help                       show this message

Here use the '-c' option to specify the kconfig of the testing kernel, if
omitted, it will be set to "defconfig" in the following setup-local step.
And the '-k' option can specify the commit number or the version of the
testing kernel, if omitted, it will be set to the local kernel version in
the following setup-local step.


5.2 Setup local environment

Use setup-local command to configure local test environment.
	# ./bin/setup-local -h
	Usage: setup-local [options] <script>/<jobfile>

	options:
	        --hdd partition              HDD partition for IO tests
	        --ssd partition              SSD partition for IO tests
	    -h, --help                       Show this message

It is easy to understand the options '--hdd' and '--ssd'. While the argument
"<script>" means the scripts path under the directories "monitors",
"pack", "setup" and "tests". And "<jobfile>" means the generated job files path
we split from above split-job command.

This setup-local command will prepare the environment for the following test
running. The preparation contains creating the necessary directories,
installing the dependent packages, making and extracting the relevant
benchmarks, etc.

After this step, there will be a configuration file under "hosts" directory
named with local hostname. For example, my hostname is "allen", then content
of this file may be like this:

	# cat hosts/allen
	memory: 8G
	hdd_partitions: /dev/sdc2
	ssd_partitions:


5.3 Run a job

Use run-local command to run a test job.

	# ./bin/run-local -h
	Usage: run-local [--dry-run] [-o RESULT_ROOT] JOBFILE
	...

The argument "JOBFILE" above is one of the job files split from split-job
command we described in 5.1. If the result root is not specified using
'-o' option here, the running result will be placed to "/result" directory.

5.3 Example

Here, we give an example how to run a specific testcase ebizzy following
above steps.

Firstly, split the job file:

	# ./sbin/split-job jobs/ebizzy.yaml
	jobs/ebizzy.yaml => ./ebizzy-200%-100x-10s.yaml

Secondly, setup the local environment:

	# ./bin/setup-local ./ebizzy-200%-100x-10s.yaml

At last, run the generated job file:

	# ./bin/run-local ./ebizzy-200%-100x-10s.yaml

Then the running result will be placed at
"/result/<hostname>/ebizzy/<kconfig>/<commit>/200%-100x-10s/<N>",
in which <N> is a RESULT_ROOT number increases from 1.
