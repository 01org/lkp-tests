#!/usr/bin/env ruby
# First line of perf report:
#
# with --header argument:
#   # ========
#   # captured on: Fri Aug  9 11:08:46 2013
#   ...
#
# without --header argument:
#   # To display the perf.data header info, please use --header/--header-only options.
#   #
#   # Samples: 1M of event 'cpu-cycles'
#   Event count (approx.): 793779025152
#   ...
#
exit unless STDIN.gets =~ /^# ========$| --header/

# Bypass lines before cs records:
#   ... <BYPASS> ...
#   # Events: 342  context-switches
#   #
#   # Overhead          Command      Shared Object                     Symbol
#   # ........  ...............  .................  .........................
#   #

$cur_event = String.new

while line = STDIN.gets
	# Events: 1K cycles
	# Events: 825  cache-misses
	# Samples: 5K of event 'cycles'
	# Samples: 489  of event 'cache-misses'
	if line =~ /^# Events: \d+[KMG ]\s+/ or line =~ /^# Samples: \d+[KMG ] of event /
		$cur_event = $'.gsub(':', '-').gsub('\'', '').chomp
		break
	end
end

# Bypass lines before record begin:
#   ... <BYPASS> ...
#       0.38%  qemu-system-x86  [kernel.kallsyms]         [k] _spin_lock_irqsave
#
while line = STDIN.gets
	break unless line =~ /^\#/
end

$all_results = []
$results = Hash.new(0)
$all_func_results = []
$func_results = []

loop do
	# break on current-segment-end
	if line == nil
		# need restore the last result of event
		$all_results << $results unless $results.empty?
		$all_func_results << $func_results unless $func_results.empty?
		break
	end
	if line =~ /^\# Events: \d+[KMG ]\s+/ or line =~ /^# Samples: \d+[KMG ] of event /
		$cur_event = $'.gsub(':', '-').gsub('\'', '').chomp
		$all_results << $results unless $results.empty?
		$results = Hash.new(0)
		$all_func_results << $func_results unless $func_results.empty?
		$func_results = []
	end

	# For function result as:
	# 93.48%    93.48%  [kernel.kallsyms]   [k] clear_page_c_e
	if line =~ /^\s*\d+\.\d+%\s+(\d+\.\d+)%\s+\S+\s+\S+\s+(\S+)\s*$/
		$func_results << ["#{$cur_event}.#{$2}", $1.to_f]
		line = STDIN.gets
		next
	end

	# Wait for new record as:
	# 0.10% entry_SYSCALL_64_fastpath;__write_nocancel;run_builtin;main;__libc_start_main
	unless line =~ /^(\d+\.\d+)%\s+(\S+)$/
		line = STDIN.gets
		next
	end

	# base_percent  is like 0.10
	# symbol_name is like entry_SYSCALL_64_fastpath.__write_nocancel.run_builtin;main.__libc_start_main
	base_percent  = $1.to_f / 100
	# We only record max 5 leves of call stack
	function_names = $2.split(';')[0, 5]
	symbol_name = $cur_event + "." + function_names.join('.')
	$results[symbol_name] += base_percent

	line = STDIN.gets
end

$all_results.each { |results|
	results.sort_by{|_, v| -v}.each do |record,percent|
		puts record + ": " + format("%.2f", percent * 100) if percent >= 0.0001
	end
}

$all_func_results.each { |results|
	results.sort_by { |_, v| -v }.each { |record, percent|
		puts "func.#{record}: #{format("%.2f", percent)}" if percent >= 0.05
	}
}
