#!/usr/bin/env ruby

LKP_SRC = ENV['LKP_SRC'] || File.dirname(File.dirname(File.realpath($PROGRAM_NAME)))

require 'time'
require "#{LKP_SRC}/lib/statistics"
require "#{LKP_SRC}/lib/string_ext"
require "#{LKP_SRC}/lib/array_ext"
require "#{LKP_SRC}/lib/log"

stats = []
test_name = nil
subtest_name = nil
has_dynamic_subtest = false

def valid_datetime?(datetime_str)
  !!Time.parse(datetime_str) rescue false
end

while (line = STDIN.gets)
  line = line.resolve_invalid_bytes

  case line
  when /^(.*) build\/tests\/(.*)$/
    # 2020-10-27 01:29:45 build/tests/core_getstats
    next unless valid_datetime?($1)

    test_name = $2
  when /Starting subtest: (.*)$/
    # Starting subtest: invalid-buffer
    next if test_name == nil

    subtest_name = $1
    has_dynamic_subtest = false
  when /^Subtest (.*): (SUCCESS|FAIL)/
    # Subtest invalid-buffer: SUCCESS (0.000s)
    # one special case is
    # 953 2020-10-26 01:36:11 build/tests/gem_sync
    # ...
    # 956 Starting subtest: default
    # 957 Starting dynamic subtest: default
    # 958   3666944 cycles: 5.455 us
    # 959 Dynamic subtest default: SUCCESS (20.015s)
    # ...
    # 980 Subtest default: SUCCESS (100.073s)
    # ...
    # 1511 Starting subtest: default
    # 1512 Starting dynamic subtest: rcs0
    # 1513   3674112 cycles: 5.444 us
    # 1514 Dynamic subtest rcs0: SUCCESS (20.010s)
    # ...
    # 1521 Subtest default: SUCCESS (60.036s)
    # above line 953-980 and 1511-1521 could be regarded as two sections for
    # gem_sync.default, they include different dynamic subtests.
    # should ignore the 'Subtest default' results from 980 and 1521 to avoid duplicated stats
    next if test_name == nil || has_dynamic_subtest

    stats_type = if $2 == 'SUCCESS'
                   'pass'
                 else
                   'fail'
                 end
    stats << test_name + "." + $1 + ".#{stats_type}: 1"
  when /^Dynamic subtest (.*): (SUCCESS|FAIL)/
    # a 'dynamic subtest' is such like a 2nd level subtest under 'subtest' as below
    # 2607 Starting subtest: exec-single-timeline
    # 2608 Starting dynamic subtest: rcs0
    # 2609 Dynamic subtest rcs0: SUCCESS (1.060s)
    next if test_name == nil || subtest_name == nil

    has_dynamic_subtest = true

    stats_type = if $2 == 'SUCCESS'
                   'pass'
                 else
                   'fail'
                 end
    stats << test_name + "." + subtest_name + ".dynamic." + $1 + ".#{stats_type}: 1"
  end
end

stats.each { |stat| puts stat }

# self validation
# rli9 FIXME one possible bad case can be below which is not checked now
#   a.pass: 1
#   a.fail: 1
duplicated_stats = stats.duplicated_elements
unless duplicated_stats.empty?
  log_error "duplicated stats: #{duplicated_stats}"
  exit 1
end
