#!/usr/bin/env ruby

LKP_SRC = ENV['LKP_SRC'] || File.dirname(File.dirname(File.realpath($PROGRAM_NAME)))

require "#{LKP_SRC}/lib/string_ext"
require "#{LKP_SRC}/lib/array_ext"
require "#{LKP_SRC}/lib/log"

stats = []
test_item = ''
fs_type = ''
build_type = ''

while (line = STDIN.gets)
  line = line.resolve_invalid_bytes.plain_text
  case line
  # 5607:blk_nblock/TEST3: SKIP: Only supported on ppc64
  # blk_pool/TEST10: SKIP required: run without superuser rights
  # blk_rw/TEST10: SKIP DEVICE_DAX_PATH does not specify enough dax devices (min: 1)
  # blk_rw/TEST11: SKIP DEVICE_DAX_PATH does not specify enough dax devices or they don't have required alignments (min: 2, alignments: 4096 4096)
  when /Only supported on ppc64/, /run without superuser rights/, /does not specify enough dax devices/
    next
  # from /nvml/src/test/unittest/unittest.sh
  # 2732: msg "$UNITTEST_NAME: SETUP ($TEST/$REAL_FS/$BUILD$MCSTR$PROV$PM)"
  when %r{^(.+)/TEST[0-9]+: SETUP\s*\((.+)\)$}
    test_item = Regexp.last_match[1]
    subtest = Regexp.last_match[2].tr('/','_')
  when %r{^(.+)/(TEST[0-9]+): (PASS|FAIL|SKIP)}
    item = Regexp.last_match[1]
    name = Regexp.last_match[2]
    next unless test_item == item

    stats << item + '_' + name + '_' + subtest + '.' + Regexp.last_match[3].downcase + ': 1'
  when %r{RUNTESTS: stopping: (.+)/(TEST[0-9]+) failed}
    item = Regexp.last_match[1]
    name = Regexp.last_match[2]
    if line =~ /TEST=(.+) FS=(.+) BUILD=(.+)/
      test_item = item
      subtest_name = $1
      fs_type = $2
      build_type = $3
    end
    next unless test_item == item

    stats << item + '_' + name + '_' + subtest_name + '_' + fs_type + '_' + build_type + '.fail: 1'
  when %r{RUNTESTS: stopping: (.+)/(TEST[0-9]+) timed out}
    item = Regexp.last_match[1]
    name = Regexp.last_match[2]
    next unless test_item == item

    stats << item + '_' + name + '_' + subtest + '.timeout: 1'
  when %r{^(.+)/(TEST[0-9]+): SKIP}
    item = Regexp.last_match[1]
    name = Regexp.last_match[2]
    stats << item + '_' + name + '.test_skip: 1'
  when /^(ignored_by_lkp)\s+(.*)\s+/
    stats << "#{$2}.#{$1}: 1"
  end
end

stats.each { |stat| puts stat }

# self validation
# FIXME one possible bad case can be below which is not checked now
#   a.pass: 1
#   a.fail: 1
duplicated_stats = stats.duplicated_elements
unless duplicated_stats.empty?
  log_error "duplicated stats: #{duplicated_stats}"
  exit 1
end
