#!/usr/bin/env ruby

$results = Hash.new(0)
$results_interval = Hash.new(0)
$run_time = 0

def calc_addon_keys(results, interval, prefix)
  results.each do |key, value|
    case key
    when /(.*)-misses/
      stem = $1
      ['s', '-references', '-instructions'].each do |pfx|
        avalue = results[stem + pfx]
        next if avalue.zero?
        total = if pfx == 's'
                  avalue + value
                else
                  avalue
                end
        puts "#{prefix}#{stem}-miss-rate%: #{value * 100.0 / total}"
        break
      end
      if key =~ /(.*)iTLB-load-misses/
        stem = $1
        instructions = results[stem + 'instructions']
        if ! instructions.zero?
          puts "#{prefix}#{stem}instructions-per-iTLB-miss: #{instructions / itlb_miss}"
        end
      end
    when /(.*)_INSERTS/
      stem = $1
      occupancy = results[stem + '_OCCUPANCY']
      if occupancy != 0
        puts "#{prefix}#{stem}_LATENCY: #{occupancy / value}"
      end
      puts "#{prefix}#{stem}_MBps: #{value.to_f * 64 / 1024 / 1024 / interval}"
    when /(.*)cpu-cycles/
      stem = $1
      instructions = results[stem + 'instructions']
      if ! instructions.zero?
        puts "#{prefix}#{stem}ipc: #{instructions / value}"
        puts "#{prefix}#{stem}cpi: #{value / instructions}"
      end
    end
  end
end

def output_interval(prev_time, time)
  return if $results_interval.empty?
  puts "time: #{time}"
  $results_interval.each do |key, value|
    puts "i.#{key}: #{value}"
    $results[key] += value
  end
  calc_addon_keys($results_interval, time - prev_time, "i.")
  $results_interval.clear
end

# Example output
#    290.690747746 777209  mem_load_uops_l3_miss_retired_remote_dram 89128748143 100.00
#    324.224668698 7928832 Bytes llc_misses.mem_read 8005538025 100.00

#    2.003151490 S0 8 321055743  cpu-cycles 8012766737 100.00
#    2.003151490 S0 8 161761287  instructions 8011773256 100.00 0.47 insn per cycle
#    3.004126313 S0 8 319801680  cpu-cycles 8006470194 100.00
#    3.004126313 S0 8 170196182  instructions 8007548409 100.00 0.50 insn per cycle

def parse
  prev_prev_time = 0
  prev_time = 0
  time = 0

  $stdin.each_line do |line|
    next unless line =~ /^\s*\d+\.\d+\s+/
    stime, *fields = line.split

    prev_time = time
    time = stime.to_f
    # time different > 10ms, new output
    if time - prev_time > 0.01
      output_interval(prev_prev_time, prev_time)
      prev_prev_time = prev_time
    end
    socket = nil
    unit = nil
    socket_key = nil

    # per-socket mode
    #    S0 8 321055743  cpu-cycles 8012766737 100.00
    if fields[0][0] == 'S'
      socket = fields[0]
      fields.delete_at 1
      fields.delete_at 0
    end

    # for unit
    # 7928832 Bytes llc_misses.mem_read 8005538025 100.00
    if fields[1] == 'Bytes'
      unit = fields[1]
      fields.delete_at 1
    end

    # 777209 mem_load_uops_l3_miss_retired_remote_dram 89128748143 100.00
    value, key = fields
    value = value.to_f

    i_imc = key.index "_IMC"
    if i_imc
      key = key[0,i_imc]
    end

    key = "#{key}_#{unit}" if unit
    socket_key = "#{socket}.#{key}" if socket

    $results_interval[key] += value
    $results_interval[socket_key] += value if socket_key
  end

  # total time
  $run_time = prev_time

  # skip the last record, because the interval hasn't run out
end

parse

$results.each do |key, value|
  # output total value
  puts "total.#{key}: #{value}"
end

calc_addon_keys($results, $run_time, "overall.")
