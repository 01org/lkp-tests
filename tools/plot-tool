#!/usr/bin/env ruby

LKP_SRC = ENV['LKP_SRC'] || File.dirname(File.dirname(File.realpath($PROGRAM_NAME)))

require 'gnuplot'
require 'optparse'
require "#{LKP_SRC}/lib/statistics.rb"
require "#{LKP_SRC}/lib/stats.rb"
require "#{LKP_SRC}/lib/yaml.rb"
require "#{LKP_SRC}/lib/plot.rb"

$opt_output_path = "output.png"

opt_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: mplot matrix.json stat_field [matrix.json stat_filed]... [OPTION...]'
  opts.separator ''
  opts.separator 'Example:'
  opts.separator ''

  opts.separator 'mplot /result/fat/dd-write/1HDD-JBOD-cfq-btrfs-100dd/x86_64-rhel/matrix.json vmstat.system.in'
  opts.separator ''
  opts.separator 'options:'

  opts.on('-o FILE', '--output FILE', 'output file name') do |fn|
    $opt_output_path = fn
  end

  opts.on_tail('-h', '--help', 'show help message') do
    puts opts
    exit
  end
end

opt_parser.parse!(ARGV)

if ARGV.empty? || ARGV.length.odd?
  puts opt_parser
  exit
end

def plot_it(matrix_stat_arr)
  plotter = MMatrixPlotter.new
  lines = []
  matrix_stat_arr.each_slice(2) do |matrix_fn, stat|
    matrix = load_json matrix_fn
    lines << [matrix, stat, stat.gsub('_', '\_')]
  end
  plotter.set_output_file_name($opt_output_path).
    set_lines(lines).
    plot
end

plot_it(ARGV)
