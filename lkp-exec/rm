#!/bin/bash

source $LKP_SRC/lib/common.sh

shopt -s nullglob

is_rt()
{
	local path=$1
	local bn=$(basename $path)
	local dn=$(dirname $path)
	[[ $bn =~ ^[0-9]{1,5}$ ]] &&
		[[ -f $path/job.yaml ]] &&
		[[ -f $dn/stddev.json ]]
}

check_rt()
{
	local path=${1%%/}
	local dn=$(dirname $path)
	grep -q $path/stats.json $dn/matrix.json
}

remove_ready()
{
	local i=0
	local path
	for path; do
		[[ $path =~ /$ ]] || path="$path/"
		if [[ -d "$path" ]] && is_rt $path ; then
			paths[$i]=$path
		else
			paths[$i]=$(sed -n "/${path//\//\\/}/p" /lkp/paths/????-??-??-*)
		fi

		echo "sed -i /${path//\//\\/}/d  /lkp/paths/????-??-??-*"
		echo "rm -fr ${paths[$i]}"

		i=$(( i + 1 ))
	done
}

remove()
{
	local i=0
	local path
	local file_name

	for path; do
		[[ $path =~ /$ ]] || path="$path/"

		# to avoid sed crash
		for file_name in /lkp/paths/????-??-??-*; do
			sed -i "/${path//\//\\/}/d"  $file_name
		done

		rm -fr "${paths[$i]}"
		i=$(( i + 1 ))
	done
}

is_mrt()
{
	local dir=$1
	local -a jobs
	local -a matrix
	matrix=( $dir/matrix.json* )
	[ ${#matrix} -eq 0 ] && return 1
	jobs=( $dir/[0-9]*/job.yaml )
	[ ${#jobs} -ge 1 ]
}

remove_from_mrtts()
{
	local path
	local _path
	local _paths

	for path in ${paths[@]}; do
		_paths="$_paths\n$(dirname $path)"
	done

	_paths=$(echo -e "$_paths" | sort | uniq)

	for _path in $_paths; do
		is_mrt $_path && echo $_path
	done | lkp delete_mrts
}

revert_unite_rt()
{
	local path
	for path in ${paths[@]}; do
		is_rt $path && check_rt $path &&
			lkp reprocess -d $path
	done
	for path in ${paths[@]}; do
		while is_rt $path && check_rt $path; do
			sleep 10
		done
	done
}

for param; do
	is_abs_path $param ||
	{
		echo "Please use an absolute path for $param"
		exit 1
	}
done

echo "The command to remove the result path are:"
remove_ready "$@"
echo -n "!!! Do you really want to do that? [No/yes]: "
read answer
if [[ $answer = "yes" ]]; then
	revert_unite_rt
	remove_from_mrtts
	remove "$@"
fi
