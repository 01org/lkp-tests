#!/bin/sh

. $LKP_SRC/lib/env.sh

umask 002

wait_for_monitors()
{
	local pidfile=$TMP/.pid-wait-monitors
	[ -s "$pidfile" ] || return 0

	echo wait for background monitors: $(cat $TMP/.name-wait-monitors)

	for i in 1 2 3 4 5
	do
		sleep $i
		ps axho pid | grep -qFwf $pidfile && continue
		return $i
	done

	echo "some monitors do not quit in time" >&2
	ps axho pid | grep -Fwf $pidfile | xargs ps u >&2

	ps faux
	return $i
}

kill_monitors()
{
	local signal=$1
	local wait_pidfile="$TMP/.pid-wait-monitors"
	local pids

	for pidfile in $TMP/pid-monitors
	do
		[ -s "$pidfile" ] || break

		if [ -s "$wait_pidfile" ]; then
			pids=$(grep -v -x -F -f "$wait_pidfile" "$pidfile")
		else
			pids=$(cat "$pidfile")
		fi

		[ -n "$pids" ] || continue
		/bin/kill $signal $pids
	done
}

# There are 2 kind of monitor termination mechanisms:
# 1) some smart monitors run setup_wait() and wait for the below post-test event
#    => $TMP/.pid-wait-monitors
$LKP_SRC/bin/event/wakeup activate-monitor
$LKP_SRC/bin/event/wakeup post-test
# 2) most simple monitors run until being killed
#    => $TMP/pid-monitors
kill_monitors -INT

wait_for_monitors && sleep 1
kill_monitors -KILL

PERF_EVENT_DATA=$TMP/perf.data
[ -s "$PERF_EVENT_DATA" ] && {
	set_perf_path "/lkp/benchmarks/perf-profile/perf"
	$perf report --children --header -U -g folded,0.5,callee --sort=dso,symbol -i $PERF_EVENT_DATA |
	gzip > $RESULT_ROOT/perf-profile.gz && {
		rm -f $PERF_EVENT_DATA
	}
}

PERF_REPORT_SRCLINE_DATA=$TMP/perf-report-srcline.data
[ -s $PERF_REPORT_SRCLINE_DATA ] && {
	set_perf_path "/lkp/benchmarks/perf-report-srcline/perf"
	$perf report --header -i $PERF_REPORT_SRCLINE_DATA --no-children -f -v \
	      --stdio --sort sym,srcline -w 10,50,100 --full-source-path |
	gzip > $RESULT_ROOT/perf-report-srcline.gz &&
	rm -f $PERF_REPORT_SRCLINE_DATA
}

wait_for_pipe()
{
	local i
	local result

	for i in $(seq 5)
	do
		sleep $i
		pgrep --pidfile $TMP/.pid-pipes '(tee|cat|gzip)-.*' >/dev/null && continue
		break
	done

	for i in $(seq 5)
	do
		sleep $i

		for result in ${tmp_results}
		do
			[ "${result%.gz}" != "$result" ] || continue
			[ -s "$result" ] && continue

			echo "wait_for_pipe $i: empty $result"
			continue 2
		done

		return 0
	done

	echo "wait_for_pipe timeout $i" >&2

	# Throw out stderr when monitors did not start due to waiting on activate-monitor
	pgrep -f "$LKP_SRC/bin/event/wait activate-monitor" >/dev/null &&
		echo "some monitors are blocked by activate-monitor" >&2

	ps faux
	ls -l $TMP_RESULT_ROOT
	return 1
}

copy_results()
{
	[ -n "$TMP_RESULT_ROOT" ] || return
	[ "$TMP_RESULT_ROOT" = "$RESULT_ROOT" ] && return

	local tmp_results="$(find $TMP_RESULT_ROOT -type f -size +0)"
	[ -n "$tmp_results" ] || return

	# give chance to monitor fifo writer to sync data back to file
	wait_for_pipe

	chown lkp.lkp ${tmp_results}
	mv --no-clobber ${tmp_results} $RESULT_ROOT/ || ls -l $tmp_results $RESULT_ROOT 2>&1
}

copy_to_result()
{
	local file=$1

	[ -s "$file" ] || return
	chmod ug+w "$file"

	cp $file $RESULT_ROOT || ls -l $file $RESULT_ROOT/$(basename $file) 2>&1
}

copy_time_files()
{
	local ret_copy_time_files=0

	for time_file in $TMP/*.time
	do
		[ -e "$time_file" ] || return

		if copy_to_result $time_file; then
			cat $time_file >> $RESULT_ROOT/time
		else
			ret_copy_time_files=1
		fi
	done

	return $ret_copy_time_files
}

copy_results

copy_time_files || ps faux --cols 1000 > $RESULT_ROOT/time-debug

[ "$kconfig" = "x86_64-rhel_gcov" ] && [ -d /sys/kernel/debug/gcov ] && {
	$LKP_SRC/tools/gather-gcov-test $TMP/gcov-test.tar.gz
	copy_to_result $TMP/gcov-test.tar.gz
}

dmesg --facility user --human --decode --color=always > $TMP/umesg
truncate --no-create --size='<10M' $TMP/output $TMP/stdout $TMP/stderr $TMP/umesg

copy_to_result $TMP/boot-time
copy_to_result $TMP/env.yaml
copy_to_result $TMP/stdout
copy_to_result $TMP/stderr
copy_to_result $TMP/output
copy_to_result $TMP/umesg
