#!/bin/bash
# - rootfs
# - benchmark

. $LKP_SRC/lib/debug.sh

[ -n "$rootfs" ] || die "rootfs is empty"
[ -n "$benchmark" ] || die "benchmark is empty"

DISTRO=${rootfs%%-*}

. $LKP_SRC/distro/${DISTRO}

DEPS_MNT=/osimage/deps
mkdir -p "$DEPS_MNT"
mount $LKP_SERVER:$DEPS_MNT $DEPS_MNT || die "Failed to run mount"

umask 002

pack_to=$DEPS_MNT/$rootfs
[[ -d "$pack_to" ]] || {
	mkdir "$pack_to"
	chown .lkp "$pack_to"
}

check_shared_package "$benchmark" && exit

update

[[ "$benchmark" = "all" ]] && benchmark="$(ls $LKP_SRC/distro/depends | grep -v -e '-dev' -e '-whitelist')"

for BM_NAME in $benchmark
do
	check_shared_package $BM_NAME

	packages=$(get_dependency_packages $DISTRO $BM_NAME)
	PACKAGE_LIST=$(apt-get --simulate --no-install-recommends install $packages |
			awk '/^Inst / { if (substr($3, 0, 1) != "[") print $2 }')

	echo "original package list for $BM_NAME:" $packages

	[[ $PACKAGE_LIST ]] || {
		echo "empty PACKAGE_LIST for $BM_NAME"
		continue
	}

	work_dir=$(mktemp -d /tmp/pack-deps-$BM_NAME-XXXXXXXX)
	cd $work_dir

	mkdir -p opt/deb
	# sequence-deb content looks like:
	#   libreadline7
	#   libssl1.1
	#   gawk
	echo "$PACKAGE_LIST" | grep -F -f "$LKP_SRC/distro/keep-deb" > opt/deb/sequence-deb.$BM_NAME

	if download "$PACKAGE_LIST"; then
		install || exit 1
		pack
		echo "$PACKAGE_LIST" > $pack_to/.${BM_NAME}.packages
	else
		echo "failed to pack-deps $BM_NAME" >&2
	fi

	rm -fr "$work_dir"
done
