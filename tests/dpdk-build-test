#!/bin/sh
# -  dpdk_commit
# -  dpdk_chase_branch
# -  dpdk_compiler

WORKSPACE=/tmp
COMMIT=$dpdk_commit
DPDK_ChaseBranch=$dpdk_chase_branch
OS="`cat /etc/issue | sed -n '1p' | tr ' ' '_'`"
BUILDDIR="${OS}-build"
COMPILER=$dpdk_compiler

echo "Update Local code"
git clone git://gitmirror/dpdk $WORKSPACE/DPDK

export ICP_ROOT=$WORKSPACE
cd $ICP_ROOT/DPDK/
git checkout $COMMIT

KernelVersion="`uname -r | sed 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)-\([0-9]*\)\(.*\)/\1\.\2\.\3-\4/g'`"
GCCVersion="`gcc --version | head -n 1 | grep -i '^gcc' | sed 's/[^0-9]*\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1\.\2\.\3/g'`"

OS_INFO="{[KERNEL: ${KernelVersion}],[GCC: ${GCCVersion}]}"

ChaseBranch=$DPDK_ChaseBranch

export TARGET_ROOT="/tmp/DPDK_Builds/${ChaseBranch}/$BUILDDIR/${OS}_${COMMIT}"

mkdir -p $TARGET_ROOT
chmod -R 777 /tmp/DPDK_Builds/${ChaseBranch}

default_gcc_target=x86_64-native-linuxapp-gcc
feature_gcc_target=x86_64-ivshmem-linuxapp-gcc

enable_configs()
{
	for config in $@
	do
		sed -i -e "s:^\(CONFIG_$config=\).*:\1y" config/common_linuxapp
	done
}

disable_configs()
{
	for config in $@
	do
		sed -i -e "s:^\(CONFIG_$config=\).*:\1n" config/common_linuxapp
	done
}

gcc_build()
{
	# build default gcc
	echo ">>>Build Default<<<"
	# sed -i 's/^CONFIG_RTE_LIBRTE_PMD_PCAP=.*$/CONFIG_RTE_LIBRTE_PMD_PCAP=n/g' config/defconfig_x86_64-native-linuxapp-gcc
	# sed -i 's/^CONFIG_RTE_NIC_BYPASS=.*$/CONFIG_RTE_NIC_BYPASS=n/g' config/defconfig_x86_64-native-linuxapp-gcc
	local RTE_CONFIGS="
		RTE_LIBRTE_PMD_PCAP
		RTE_NIC_BYPASS
		RTE_BUILD_SHARED_LIB"
	disable_configs "$RTE_CONFIGS"

	gmake install T=$default_gcc_target 2>&1 | tee /tmp/null

	echo ""

	# build features gcc
	echo ">>>Build Features<<<"

	# ivshmem
	echo "${OS_INFO}" | tee ${TARGET_ROOT}/build_ivshmem.log
	echo ">>>$feature_gcc_target<<<" | tee -a ${TARGET_ROOT}/build_ivshmem.log
	gmake install T=$feature_gcc_target 2>&1   | tee -a ${TARGET_ROOT}/build_ivshmem.log

	# x86_64-native-linuxapp-gcc%CONFIG_RTE_LIBRTE_PMD_PCAP=y@CONFIG_RTE_NIC_BYPASS=y
	enable_configs "$RTE_CONFIGS"

	echo "${OS_INFO}" | tee ${TARGET_ROOT}/build_configuration_modification.log
	echo ">>>$default_gcc_target%CONFIG_RTE_LIBRTE_PMD_PCAP=y@CONFIG_RTE_NIC_BYPASS=y@CONFIG_RTE_BUILD_SHARED_LIB=y<<<" | tee -a ${TARGET_ROOT}/build_configuration_modification.log
	gmake install T=$default_gcc_target 2>&1 | tee -a ${TARGET_ROOT}/build_configuration_modification.log

	# x86_64-native-linuxapp-gcc%enable all DEBUG OPTION :y
	local DEBUG_CONFIGS="
		RTE_LIBRTE_ETHDEV_DEBUG
		RTE_LIBRTE_E1000_DEBUG_INIT
		RTE_LIBRTE_E1000_DEBUG_RX
		RTE_LIBRTE_E1000_DEBUG_TX
		RTE_LIBRTE_E1000_DEBUG_TX_FREE
		RTE_LIBRTE_E1000_DEBUG_DRIVER
		RTE_LIBRTE_IXGBE_DEBUG_INIT
		RTE_LIBRTE_IXGBE_DEBUG_RX
		RTE_LIBRTE_IXGBE_DEBUG_TX
		RTE_LIBRTE_IXGBE_DEBUG_TX_FREE
		RTE_LIBRTE_IXGBE_DEBUG_DRIVER
		RTE_LIBRTE_I40E_DEBUG_INIT
		RTE_LIBRTE_I40E_DEBUG_RX
		RTE_LIBRTE_I40E_DEBUG_TX
		RTE_LIBRTE_I40E_DEBUG_TX_FREE
		RTE_LIBRTE_I40E_DEBUG_DRIVER
		RTE_LIBRTE_VIRTIO_DEBUG_INIT
		RTE_LIBRTE_VIRTIO_DEBUG_RX
		RTE_LIBRTE_VIRTIO_DEBUG_TX
		RTE_LIBRTE_VIRTIO_DEBUG_DRIVER
		RTE_LIBRTE_VIRTIO_DEBUG_DUMP
		RTE_LIBRTE_VMXNET3_DEBUG_INIT
		RTE_LIBRTE_VMXNET3_DEBUG_RX
		RTE_LIBRTE_VMXNET3_DEBUG_TX
		RTE_LIBRTE_VMXNET3_DEBUG_TX_FREE
		RTE_LIBRTE_VMXNET3_DEBUG_DRIVER
		RTE_LIBRTE_RING_DEBUG
		RTE_LIBRTE_MEMPOOL_DEBUG
		RTE_LIBRTE_MBUF_DEBUG
		RTE_LIBRTE_TIMER_DEBUG
		RTE_LIBRTE_MALLOC_DEBUG
		RTE_LIBRTE_CMDLINE_DEBUG
		RTE_LIBRTE_HASH_DEBUG
		RTE_LIBRTE_LPM_DEBUG
		RTE_LIBRTE_ACL_DEBUG
		RTE_LIBRTE_POWER_DEBUG
		RTE_LIBRTE_IP_FRAG_DEBUG
		RTE_KNI_KO_DEBUG
		RTE_KNI_VHOST_DEBUG_RX
		RTE_KNI_VHOST_DEBUG_TX
		RTE_LIBRTE_POWER_DEBUG
		RTE_LIBRTE_VHOST_DEBUG"

	enable_configs "$DEBUG_CONFIGS"

	echo ">>>$default_gcc_target%enable all DEBUG OPTION :y<<<" | tee -a ${TARGET_ROOT}/build_configuration_modification.log
	gmake install T=$default_gcc_target 2>&1 | tee -a ${TARGET_ROOT}/build_configuration_modification.log
}

case $COMPILER in
	gcc)
		export RTE_KERNELDIR=/usr/src/kernels/3.19.5-100.fc20.x86_64/
		gcc_build
		;;
	*)
		echo "WRONG compiler specified!!!"
		exit 1
		;;
esac

# mv results to LKP server result directory
mkdir -p $RESULT_ROOT/build_result
mv /tmp/DPDK_Builds/${ChaseBranch} $RESULT_ROOT/build_result
cd $WORKSPACE/DPDK/
[ -d $default_gcc_target ] && mv $default_gcc_target $RESULT_ROOT/build_result
[ -d $feature_gcc_target ] && mv $feature_gcc_target $RESULT_ROOT/build_result
