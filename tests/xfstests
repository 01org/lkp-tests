#!/bin/sh
# - test

## Regression test suite for xfs and other filesystems.

. $LKP_SRC/lib/job.sh
. $LKP_SRC/lib/debug.sh
. $LKP_SRC/lib/upload.sh
. $LKP_SRC/lib/reproduce-log.sh

[ "$nr_partitions" -lt 2 ] && die "$nr_partitions -lt 2"
cd $BENCHMARK_ROOT/xfstests || die "fail to cd $BENCHMARK_ROOT/xfstests"

# xfstests use awk to call strtonum(), however:
# - gawk support strtonum()
# - mawk not support strtonum()
#
# due to awk maybe link to mawk, so restore the gawk symlink.
[ -f /usr/bin/gawk ] && ln -sf /usr/bin/gawk /usr/bin/awk

check_add_user()
{
	[ "x$1" != "x" ] || return

	cat /etc/passwd | grep -q "$1"
	[ $? -eq 0 ] && return

	useradd --uid 1001 --gid 1001 "$1"
	[ $? -eq 0 ] || echo "$(basename $0): useradd $1 failed" 1>&2
}

set_env()
{
	# "fsgqa" user is required in some of xfstests, thus check if such user
	# has already been added. If not, add "fsgqa" user.
	check_add_user "fsgqa"

	umount $mount_points

	log_eval export TEST_DIR=${mount_points%% *}
	log_eval export TEST_DEV=${partitions%% *}

	# f2fs needs this to prevent mount failure
	log_eval export FSTYP=$fs
	log_eval export SCRATCH_MNT=/fs/scratch

	log_cmd mkdir $SCRATCH_MNT -p

	if [ "$fs" = btrfs ] && [ "$nr_partitions" -ge 4 ]; then
		log_eval export SCRATCH_DEV_POOL=\"${partitions#* }\"
	else
		log_eval export SCRATCH_DEV=${partitions##* }
	fi

	## We could use the "pack-deps" job to generate the relevant dependency package with cgz format,
	## but sometimes the dependency package have a different layout with the original package.
	## For examle:
	## 1)the command "btrfs" under directory /sbin  in original rootfs.
	## 2)the command "btrfs" under directory /bin  in dependency packages.
	## this will result in the newer btrfs command can't override the original btrfs command,
	## moreover, /bin behind with /sbin directory in the default "PATH" environment.
	## so we need to adjust the "PATH" search order.
	export PATH="/bin/":$PATH

	if [ "$fs" = xfs ] && [ "$nr_partitions" -ge 3 ]; then
		SCRATCH_LOGDEV=${partitions#* }
		SCRATCH_LOGDEV=${SCRATCH_LOGDEV%% *}
		log_eval export SCRATCH_LOGDEV=$SCRATCH_LOGDEV
	fi
}

run_test()
{
	## Currently, we support the following several format's test item.
	## With "generic" testcase as an example:
	## - generic-all
	## - generic-127
	## - generic-quick/mid/slow1/slow2
	## - generic-new
	## - generic-not-run
	## - generic-out-mismatch

	local test_dir="$LKP_SRC/pack/xfstests-addon/tests"

	if [ "${test#*-}" = "all" ]; then
		all_tests=$(cd tests && ls ${test%-*}/[0-9][0-9][0-9])
	elif [ "${test#*-}" = "new" ]; then
		all_tests=$(cd tests && sed "s:^:${test%-*}/:" $test)
	elif [ "${test%[a-z]-[0-9][0-9][0-9]}" != "$test" ]; then
		all_tests="${test%-*}/${test#*-}"
	elif [ "${test#*-}" != "$test" ]; then
		all_tests=$(sed "s:^:${test%-*}/:" $test_dir/$test)
	else
		all_tests=$(cd tests && ls $test/[0-9][0-9][0-9] | grep -v -F -f $test_dir/$test-broken)
	fi

	log_cmd ./check $all_tests
}

export LC_ALL=C
export LANG=C
read_env_vars
set_env
run_test
exit_value=$?

upload_files -t results $BENCHMARK_ROOT/xfstests/results/*
exit $exit_value
