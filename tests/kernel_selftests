#!/bin/bash

## The kernel contains a set of "self tests" under the tools/testing/selftests/
## directory. These are intended to be small unit tests to exercise individual
## code paths in the kernel.
## See: https://www.kernel.org/doc/Documentation/kselftest.txt

. $LKP_SRC/lib/debug.sh

shopt -s nullglob

# linux-headers file is created by 0day system, and located in /usr/src/linux-headers-$kconfig-$commit directory.
linux_headers_dirs=(/usr/src/linux-headers*)

[[ $linux_headers_dirs ]] || die "failed to find linux-headers package"

linux_headers_dir=${linux_headers_dirs[-1]}
echo "KERNEL SELFTESTS: linux_headers_dir is $linux_headers_dir"

# linux-selftests file is created by 0day system, and located in /usr/src/linux-selftests-$kconfig-$commit directory.
linux_selftests_dir=(/usr/src/linux-selftests-*)
[[ $linux_selftests_dir ]] || die "failed to find linux-selftests dir"

# headers_install's default location is usr/include which is required by several tests' Makefile
mkdir -p "$linux_selftests_dir/usr/include" || die
mount --bind $linux_headers_dir/include $linux_selftests_dir/usr/include || die

cd $linux_selftests_dir/tools/testing/selftests || die

# workaround hugetlbfstest.c open_file() error
mkdir -p /hugepages

# has too many errors now
sed -i 's/hugetlbfstest//' vm/Makefile


# make sure the test_bpf.ko path for bpf test is right
mkdir -p "$linux_selftests_dir/lib" || die
mount --bind /lib/modules/*/kernel/lib $linux_selftests_dir/lib || die

# temporarily workaround compile error on gcc-6
command -v gcc >/dev/null || ln -sf /usr/bin/gcc-5 /usr/bin/gcc

for mf in */Makefile; do
	subtest=${mf%/Makefile}

	grep -E -q -m 1 "^TARGETS \+?=  ?$subtest" Makefile || {
		echo "skip ${subtest} test: not be default compiling/testing target"
		continue
	}

	[[ $subtest = "powerpc" ]] && continue
	# skip zram since 0day-kernel-tests always disable CONFIG_ZRAM which is required by zram
	# for local user, you can enable CONFIG_ZRAM by yourself
	[[ $subtest = "zram" ]] && continue

	if [[ $subtest = "efivarfs" ]]; then
		[[ -d "/sys/firmware/efi" ]] || {
				echo "skip efivarfs test: /sys/firmware/efi dir does not exist"
				continue
		}

		grep -q -F -w efivarfs /proc/filesystems || modprobe efivarfs || {
			echo "skip efivarfs test: no efivarfs support, try enable CONFIG_EFIVAR_FS"
			continue
		}
		# if efivarfs is built-in, "modprobe efivarfs" always returns 0, but it does not means
		# efivarfs is supported since this requires some specified hardwares, such as booting from
		# uefi, so check again
		log_cmd mount -t efivarfs efivarfs /sys/firmware/efi/efivars || {
			echo "skip efivarfs test: unable to mount efivarfs to /sys/firmware/efi/efivars"
			continue
		}
	fi

	if [[ "$subtest" = "pstore" ]] && [[ ! -e /dev/pmsg0 ]]; then
		# in order to create a /dev/pmsg0, we insert a dummy ramoops device
		modprobe ramoops mem_address=0x8000000 ecc=1 mem_size=1000000 2>&1
		[[ ! -e /dev/pmsg0 ]] && {
			echo "skip pstore test: /dev/pmsg0 does not exist"
			continue
		}
	fi

	# As this case suggested, some distro(suse/debian) udev may have /lib/udev/rules.d/50-firmware.rules
	# which contains "SUBSYSTEM==firmware, ACTION==add, ATTR{loading}=-1", it will
	# immediately cancel all fallback requests, so here we remove it and restore after this case
	[[ "$subtest" = "firmware" ]] && log_cmd mv /lib/udev/rules.d/50-firmware.rules . && {
		# udev have many rules located at /lib/udev/rules.d/, once those rules are changed
		# we need to restart udev service to reload the latest rules.
		if [[ -e /etc/init.d/udev ]]; then
			log_cmd /etc/init.d/udev restart
		else
			log_cmd systemctl restart systemd-udevd
		fi
	}
	echo
	if [[ "$LKP_LOCAL_RUN" != "1" ]] && [[ "$subtest" = "capabilities" ]]; then
		# workaround: run capabilities under user lkp
		log_cmd chown lkp:lkp $subtest -R 2>&1
		log_cmd su lkp -c "make run_tests -C $subtest 2>&1"
	else
		log_cmd make run_tests -C $subtest  2>&1
	fi
	[[ "$subtest" = "firmware" ]] && log_cmd mv 50-firmware.rules /lib/udev/rules.d/50-firmware.rules
done
