#!/bin/bash
# - test
# - group

. $LKP_SRC/lib/debug.sh
. $LKP_SRC/lib/reproduce-log.sh

cd $BENCHMARK_ROOT/nvml || die "Can not find nvml dir"

if [[ "$test" = "non-pmem" ]]; then
	tmp_dir=$(mktemp -d)
	echo "NON_PMEM_FS_DIR=$tmp_dir" > src/test/testconfig.sh
elif [[ "$test" = "pmem" ]]; then
	echo "PMEM_FS_DIR=/fs/pmem0" > src/test/testconfig.sh
else
	die "Parameter \"test\" is wrong"
fi

[[ -n "$group" ]] || die "Parameter \"group\" is empty"

# at pack/nvml stage, we install valgrind bianries to /tmp/valgrind_install/usr/local
# and then pack them to /usr/local. However when those binaries are executed,
# they will reference to /tmp/valgrind_install/user/local where they are installed
# so here we create a symbolic link to make valgrind work
mkdir -p /tmp/valgrind_install || die "mkdir -p /tmp/valgrind_install failed"
ln -sf /usr /tmp/valgrind_install/usr || die "link failed"

make EXTRA_CFLAGS=-DUSE_VALGRIND || die "make failed"
make EXTRA_CFLAGS=-DUSE_VALGRIND test || "make test failed"

cd src/test || die "Can not find test dir"
testcases=$(ls -d "$group"_* 2>/dev/null) || testcases=$(ls -d "$group" 2>/dev/null)
[[ -n "$testcases" ]] || die "Parameter \"group\" is invalid"

user_filter="blk_pool log_pool obj_pool pmempool_rm util_file_create util_file_open"
while read testcase
do
	if [ "$LKP_LOCAL_RUN" != "1" ] && echo "$user_filter" | grep -q -w "$testcase"; then
		log_cmd chown lkp:lkp -R $BENCHMARK_ROOT/nvml
		log_cmd chown lkp:lkp -R /tmp
		[ "$test" = "pmem" ] && log_cmd chown lkp:lkp -R /fs/pmem0
		log_cmd su lkp -c "./RUNTESTS $testcase  2>&1"
	else
		log_cmd ./RUNTESTS $testcase  2>&1
	fi
done <<< "$testcases"
