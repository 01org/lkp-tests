#!/bin/bash

download()
{
	source_dir="linux"

	[[ -d linux ]] && return

	[[ -d /c/linux ]] && local opt_ref="--reference /c/linux"

	echo "Downloading kernel from git.kernel.org ..."

	echo "If the kernel has been download into the computer, you can copy it to $(pwd)/${source_dir}"
	echo "As far as possible, please keep the version of source code same with the installed kernel."
	echo "If you want test a specfied version, you can download the code first, build and install it,"
	echo "then restart the machine using the new kernel. Lastly, you can start to test it."

	local cmd="git clone -q $opt_ref https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git"
	$cmd && return
	$cmd
}

get_kernel_version()
{
	# format: X.Y.Z-...
	local version=$(uname -r)

	# format: X.Y.Z
	local a=${version%%-*}

	# format: X.Y
	local b=${a%.*}

	echo "v"$b
}

build()
{
	if [[ -d .git ]]; then
		local installed_version=$(get_kernel_version)
		git tag | grep -x $installed_version || die "can not bring the download kernel version into correspondence with the installed kernel"
		echo "switch to version $installed_version ..."
		git checkout -b "test-"$installed_version $installed_version
	else
		echo "please make sure the version of current kernel is $installed_version"
	fi

	make allyesconfig		|| return
	make prepare			|| return
	# gcc -O2 -g -std=gnu99 -Wall -I../../../../usr/include/    gpio-mockup-chardev.c ../../../gpio/gpio-utils.o ../../../../usr/include/linux/gpio.h  -lmount -I/usr/include/libmount -o gpio-mockup-chardev
	# gcc: error: ../../../gpio/gpio-utils.o: No such file or directory
	make -C tools/gpio

	# gcc -D_FILE_OFFSET_BITS=64 -I../../../../include/uapi/ -I../../../../include/ -I../../../../usr/include/    fuse_mnt.c  -o /tmp/build-kernel_selftests/linux/tools/testing/selftests/memfd/fuse_mnt
	# /tmp/ccW41Bj9.o: In function `main':
	# fuse_mnt.c:(.text+0x25f): undefined reference to `fuse_main_real'
	# collect2: error: ld returned 1 exit status
	make -C tools/testing/selftests/memfd fuse_mnt

	# make[1]: Entering directory '/tmp/build-kernel_selftests/linux/tools/testing/selftests/net'
	# gcc -Wall -Wl,--no-as-needed -O2 -g -I../../../../usr/include/    reuseport_bpf_numa.c  -o /tmp/build-kernel_selftests/linux/tools/testing/selftests/net/reuseport_bpf_numa
	# /tmp/ccdh6rgH.o: In function `send_from_node':
	# /tmp/build-kernel_selftests/linux/tools/testing/selftests/net/reuseport_bpf_numa.c:138: undefined reference to `numa_run_on_node'
	# /tmp/ccdh6rgH.o: In function `main':
	# /tmp/build-kernel_selftests/linux/tools/testing/selftests/net/reuseport_bpf_numa.c:230: undefined reference to `numa_available'
	# /tmp/build-kernel_selftests/linux/tools/testing/selftests/net/reuseport_bpf_numa.c:233: undefined reference to `numa_max_node'
	# collect2: error: ld returned 1 exit status
	make -C tools/testing/selftests/net reuseport_bpf_numa

	cd tools/testing/selftests	|| return

	# temporarily workaround compile error on gcc-6
	[[ "$LKP_LOCAL_RUN" = "1" ]] && {
		# local user may contain both gcc-5 and gcc-6
		CC=$(basename $(readlink $(which gcc)))
		# force to use gcc-5 to build x86
		[[ "$CC" = "gcc-6" ]] && command -v gcc-5 >/dev/null && sed -i -e '/^include ..\/lib.mk/a CC=gcc-5' x86/Makefile
	}

	make				|| return
	# install cpupower command
	cd ../../power/cpupower		|| return
	make 				|| return
	make install			|| return
	cd ../../..
}

install()
{
	cp -af tools/testing/selftests $BM_ROOT/selftests
}

pack()
{
	{
		echo /usr
		echo /usr/lib
		find /usr/lib/libcpupower.*
		echo /usr/bin
		echo /usr/bin/cpupower
		echo /lkp
		echo /lkp/benchmarks
		echo /lkp/benchmarks/$BM_NAME
		find /lkp/benchmarks/$BM_NAME/*
	} |
	cpio --quiet -o -H newc | gzip -n -9 > /lkp/benchmarks/${BM_NAME}.cgz
	[[ $arch ]] && mv "/lkp/benchmarks/${BM_NAME}.cgz" "/lkp/benchmarks/${BM_NAME}-${arch}.cgz"
}

# when running in local, need to keep linux repo for testing
cleanup()
{
	:
}
