#!/bin/bash

download()
{
	source_dir="linux"

	[[ -d linux ]] && return

	[[ -d /c/linux ]] && local opt_ref="--reference /c/linux"

	echo "Downloading kernel from git.kernel.org ..."

	echo "If the kernel has been download into the computer, you can copy it to $(pwd)/${source_dir}"
	echo "As far as possible, please keep the version of source code same with the installed kernel."
	echo "If you want test a specfied version, you can download the code first, build and install it,"
	echo "then restart the machine using the new kernel. Lastly, you can start to test it."

	local cmd="git clone -q $opt_ref https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git"
	$cmd && return
	$cmd
}

get_kernel_version()
{
	# format: X.Y.Z-...
	local version=$(uname -r)

	# format: X.Y.Z
	local a=${version%%-*}

	# format: X.Y
	local b=${a%.*}

	echo "v"$b
}

build()
{
	if [[ -d .git ]]; then
		local installed_version=$(get_kernel_version)
		git tag | grep -x $installed_version || die "can not bring the download kernel version into correspondence with the installed kernel"
		echo "switch to version $installed_version ..."
		git checkout -b "test-"$installed_version $installed_version
	else
		echo "please make sure the version of current kernel is $installed_version"
	fi

	make allyesconfig		|| return
	make prepare			|| return
	# install cpupower command
	cd ../../power/cpupower		|| return
	make 				|| return
	make install			|| return
	cd ../../..
}

install()
{
	local header_dir="/tmp/linux-headers"

	mkdir -p $header_dir
	make headers_install INSTALL_HDR_PATH=$header_dir

	mkdir -p $BM_ROOT/usr/include
	cp -af $header_dir/include/* $BM_ROOT/usr/include

	mkdir -p $BM_ROOT/tools/include/uapi/asm
	cp -af $header_dir/include/asm/* $BM_ROOT/tools/include/uapi/asm

	mkdir -p $BM_ROOT/tools/testing/selftests
	cp -af tools/testing/selftests/* $BM_ROOT/tools/testing/selftests
}

pack()
{
	{
		echo /usr
		echo /usr/lib
		find /usr/lib/libcpupower.*
		echo /usr/bin
		echo /usr/bin/cpupower
		echo /lkp
		echo /lkp/benchmarks
		echo /lkp/benchmarks/$BM_NAME
		find /lkp/benchmarks/$BM_NAME/*
	} |
	cpio --quiet -o -H newc | gzip -n -9 > /lkp/benchmarks/${BM_NAME}.cgz
	[[ $arch ]] && mv "/lkp/benchmarks/${BM_NAME}.cgz" "/lkp/benchmarks/${BM_NAME}-${arch}.cgz"
}

# when running in local, need to keep linux repo for testing
cleanup()
{
	:
}
