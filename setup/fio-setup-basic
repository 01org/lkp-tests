#!/bin/sh
# - runtime
# - rw
# - bs
# - ioengine
# - iodepth
# - direct
# - test_size
# - nr_task
# - fallocate

. $LKP_SRC/lib/common.sh
. $LKP_SRC/lib/unit.sh
. $LKP_SRC/lib/debug.sh

[ -n "$test_size" ] || die "test_size must be specified for fio"

test_size=$(to_byte $test_size)
size=$((test_size / nr_task))

: ${bs:=4k}
: ${ioengine:=sync}
: ${runtime:=300}
: ${rw:=write}
: ${iodepth:=32}
: ${direct:=0}
: ${fallocate:=posix}
: ${nr_task:=1}

direct=$(parse_bool $direct)

nr_mount_point=$(echo $mount_points | wc -w)
jobs_per_dev=$((nr_task / nr_mount_point))

nr_task_remain=$((nr_task % nr_mount_point))
[ "$nr_task_remain" -ne 0 ] && die "nr_task % nr_mount_point = $nr_task_remain"

create_task="\
[global]
bs=$bs
ioengine=$ioengine
iodepth=$iodepth
size=$size
direct=$direct
runtime=$runtime
invalidate=1
fallocate=$fallocate
group_reporting
create_only=1
"

no=0
for mount_point in $mount_points; do
	create_task="\
$create_task
[task_$no]
rw=$rw
directory=$mount_point
numjobs=$jobs_per_dev
"
	no=$((no+1))
done

echo -n "$create_task" | sed '/create_only/d' > $TMP_RESULT_ROOT/fio.task
echo -n "$create_task" | fio --output-format=json - > /dev/null
